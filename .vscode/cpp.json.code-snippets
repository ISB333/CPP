{
	// Place your CPP workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Canonical Class Header": {
		"prefix": "classcanon",
		"body": [
			"#pragma once",
			"# include <iostream>",
			"# include <cstring>",
			"",
			"class ${TM_FILENAME_BASE} {",
			"    private:",
			"        // Members",
			"",
			"    public:",
			"        ${TM_FILENAME_BASE}();",
			"        ${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} &other);",
			"        ${TM_FILENAME_BASE}& operator=(const ${TM_FILENAME_BASE} &other);",
			"        ~${TM_FILENAME_BASE}();",
			"};",
			""
		],
		"description": "Create canonical class with header guards"
	},
	"Canonical Class Implementation": {
		"prefix": "classimpl",
		"body": [
			"#include \"${1:${TM_FILENAME_BASE/(.*)/$1.h/}}pp\"",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}() {",
			"    // Default constructor implementation",
			"}",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} &other) {",
			"    *this = other;",
			"}",
			"",
			"${TM_FILENAME_BASE}& ${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE} &other) {",
			"    if (this != &other) {",
			"        // Copy members here",
			"    }",
			"    return *this;",
			"}",
			"",
			"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}() {",
			"    // Destructor implementation",
			"}"
		],
		"description": "Create canonical class implementation"
	},
	"Derived Class Header": {
		"prefix": "classderived",
		"body": [
			"#pragma once",
			"# include \"${1:BaseClass}.hpp\"",
			"",
			"class ${TM_FILENAME_BASE} : public ${1:BaseClass} {",
			"    public:",
			"        ${TM_FILENAME_BASE}();",
			"        ${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} &other);",
			"        ${TM_FILENAME_BASE}& operator=(const ${TM_FILENAME_BASE} &other);",
			"        virtual ~${TM_FILENAME_BASE}();",
			"",
			"    private:",
			"        // Members",
			"};",
			""
		],
		"description": "Create derived class header"
	},
	"Derived Class Implementation": {
		"prefix": "classderivedimp",
		"body": [
			"#include \"${TM_FILENAME_BASE}.hpp\"",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}() : ${1:BaseClass}() {",
			"    // Constructor implementation",
			"}",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} &other) : ${1:BaseClass}(other) {",
			"    *this = other;",
			"}",
			"",
			"${TM_FILENAME_BASE}& ${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE} &other) {",
			"    if (this != &other) {",
			"        ${1:BaseClass}::operator=(other);",
			"        // Copy derived members",
			"    }",
			"    return *this;",
			"}",
			"",
			"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}() {",
			"    // Destructor implementation",
			"}",
			""
		],
		"description": "Create derived class implementation"
	}
}
